#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/pio.h"
#include "hardware/clocks.h"

// Biblioteca gerada pelo arquivo .pio durante compilação.
#include "ws2818b.pio.h"

// Definição do número de LEDs e pino.
#define LED_COUNT 25
#define LED_PIN 7

// Definição de pixel GRB
typedef struct {
    uint8_t G, R, B; // Valores de cor para o LED
} npLED_t;

// Declaração do buffer de pixels que formam a matriz.
npLED_t leds[LED_COUNT];

// Variáveis para uso da máquina PIO.
PIO np_pio;
uint sm;

// Função para inicializar a matriz de LEDs
void npInit(uint pin) {
    uint offset = pio_add_program(pio0, &ws2818b_program);
    np_pio = pio0;
    sm = pio_claim_unused_sm(np_pio, true); // Aloca a máquina PIO 
    ws2818b_program_init(np_pio, sm, offset, pin, 800000.f);
    for (uint i = 0; i < LED_COUNT; ++i) {
        leds[i].R = 0;
        leds[i].G = 0;
        leds[i].B = 0;
    }
}

// Função para atribuir uma cor RGB a um LED específico
void npSetLED(const uint index, const uint8_t r, const uint8_t g, const uint8_t b) {
    leds[index].R = r;
    leds[index].G = g;
    leds[index].B = b;
}

// Função para apagar todos os LEDs
void npClear() {
    for (uint i = 0; i < LED_COUNT; ++i) {
        npSetLED(i, 0, 0, 0);
    }
    npWrite();
}

// Função para escrever os dados no buffer dos LEDs
void npWrite() {
    for (uint i = 0; i < LED_COUNT; ++i) {
        pio_sm_put_blocking(np_pio, sm, leds[i].G);
        pio_sm_put_blocking(np_pio, sm, leds[i].R);
        pio_sm_put_blocking(np_pio, sm, leds[i].B);
    }
    sleep_us(100); // Sinal de RESET
}

// Definição dos pinos do teclado matricial
const uint8_t ROWS[] = {18, 19, 20, 4};
const uint8_t COLS[] = {16, 17, 9, 8};

// Mapeamento das teclas do teclado 4x4
char keys[4][4] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

// Função para ler a tecla pressionada no teclado matricial
char getKey() {
    for (int row = 0; row < 4; row++) {
        gpio_put(ROWS[row], 0); // Define a linha como LOW
        for (int col = 0; col < 4; col++) {
            if (!gpio_get(COLS[col])) {
                while (!gpio_get(COLS[col])) {} // Espera a tecla ser liberada
                return keys[row][col];
            }
        }
        gpio_put(ROWS[row], 1); // Define a linha como HIGH
    }
    return 0; // Nenhuma tecla pressionada
}

int main() {
    stdio_init_all();

    // Configuração dos pinos do teclado matricial
    for (int i = 0; i < 4; i++) {
        gpio_init(ROWS[i]);
        gpio_set_dir(ROWS[i], GPIO_OUT);
        gpio_put(ROWS[i], 1);

        gpio_init(COLS[i]);
        gpio_set_dir(COLS[i], GPIO_IN);
        gpio_pull_up(COLS[i]);
    }

    // Inicialização da matriz de LEDs
    npInit(LED_PIN);

    while (true) {
        char key = getKey();
        if (key == 'D') {
            npClear(); // Limpa os LEDs
            for (uint i = 0; i < LED_COUNT; ++i) {
                npSetLED(i, 0, 128, 0); // Verde com 50% de intensidade
            }
            npWrite();
        }
        sleep_ms(50); // Delay para evitar leituras rápidas
    }

    return 0;
}
