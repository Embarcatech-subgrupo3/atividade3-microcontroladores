#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/pio.h"
#include "ws2818b.pio.h"

// Configurações da Matriz de LEDs
#define LED_COUNT 25
#define LED_PIN 7

struct pixel_t {
    uint8_t R, G, B;
};
typedef struct pixel_t pixel_t;

pixel_t leds[LED_COUNT];
PIO np_pio;
uint sm;
// Configurações do Teclado Matricial
const uint8_t ROWS[] = {18, 19, 20, 4};  // Linhas
const uint8_t COLS[] = {16, 17, 9, 8};   // Colunas
char keys[4][4] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

// Funções da Matriz de LEDs
void npInit(uint pin) {
    uint offset = pio_add_program(pio0, &ws2818b_program);
    np_pio = pio0;
    sm = pio_claim_unused_sm(np_pio, false);
    ws2818b_program_init(np_pio, sm, offset, pin, 800000.f);
    for (uint i = 0; i < LED_COUNT; i++) {
        leds[i].R = leds[i].G = leds[i].B = 0;
    }
}

void npSetLED(uint index, uint8_t r, uint8_t g, uint8_t b) {
    leds[index].R = r;
    leds[index].G = g;
    leds[index].B = b;
}

void npWrite() {
    for (uint i = 0; i < LED_COUNT; i++) {
        pio_sm_put_blocking(np_pio, sm, leds[i].G);
        pio_sm_put_blocking(np_pio, sm, leds[i].R);
        pio_sm_put_blocking(np_pio, sm, leds[i].B);
    }
    sleep_us(100);
}

// Função para inicializar o teclado
void initKeypad() {
    for (int i = 0; i < 4; i++) {
        gpio_init(ROWS[i]);
        gpio_set_dir(ROWS[i], GPIO_OUT);
        gpio_put(ROWS[i], 1);

        gpio_init(COLS[i]);
        gpio_set_dir(COLS[i], GPIO_IN);
        gpio_pull_up(COLS[i]);
    }
}

// Função para ler uma tecla
char getKey() {
    for (int row = 0; row < 4; row++) {
        gpio_put(ROWS[row], 0);
        for (int col = 0; col < 4; col++) {
            if (!gpio_get(COLS[col])) {
                while (!gpio_get(COLS[col]));
                gpio_put(ROWS[row], 1);
                return keys[row][col];
            }
        }
        gpio_put(ROWS[row], 1);
    }
    return 0;
}

// Função para limpar o buffer de LEDs
void npClear() {
  for (uint i = 0; i < LED_COUNT; ++i)
    npSetLED(i, 0, 0, 0);
}

int main() {
    stdio_init_all();
    npInit(LED_PIN);
    initKeypad();

    while (true) {
        char key = getKey(); // Lê a tecla pressionada
        if (key) {
            printf("Tecla pressionada: %c\n", key);
            
            // Limpa todos os LEDs antes de aplicar a nova configuração
            npClear();

            // Processa a tecla pressionada com if e else if
            if (key == 'A') {
                npSetLED(0, 255, 0, 0); // Exemplo: LED 0 em vermelho
            } 
            else if (key == 'B') {
                npSetLED(1, 0, 255, 0); // Exemplo: LED 1 em verde
            } 
            else if (key == 'C') {
                npSetLED(2, 0, 0, 255); // Exemplo: LED 2 em azul
            } 
            else if (key == 'D') {
                npSetLED(3, 255, 255, 0); // Exemplo: LED 3 em amarelo
            } 
            else {
                npClear(); // Garante que os LEDs sejam apagados
            }

            // Atualiza a matriz de LEDs
            npWrite();
        }

        // Pequeno delay para evitar leituras rápidas demais
        sleep_ms(100);
    }

    return 0;
}
