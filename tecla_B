#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/pio.h"
#include "hardware/clocks.h"

// Biblioteca gerada pelo arquivo .pio durante compilação.
#include "ws2818b.pio.h"

// Definição do número de LEDs e pino.
#define LED_COUNT 25
#define LED_PIN 7

// Definição de pixel GRB
struct pixel_t {
  uint8_t G, R, B; // Três valores de 8-bits compõem um pixel.
};
typedef struct pixel_t pixel_t;
typedef pixel_t npLED_t; // Mudança de nome de "struct pixel_t" para "npLED_t" por clareza.

// Declaração do buffer de pixels que formam a matriz.
npLED_t leds[LED_COUNT];

// Variáveis para uso da máquina PIO.
PIO np_pio;
uint sm;

// Função para inicializar a matriz de LEDs
void npInit(uint pin) {
  uint offset = pio_add_program(pio0, &ws2818b_program);
  np_pio = pio0;
  sm = pio_claim_unused_sm(np_pio, false);
  if (sm < 0) {
    np_pio = pio1;
    sm = pio_claim_unused_sm(np_pio, true); // Se nenhuma máquina estiver livre, panic!
  }
  ws2818b_program_init(np_pio, sm, offset, pin, 800000.f);
  for (uint i = 0; i < LED_COUNT; ++i) {
    leds[i].R = 0;
    leds[i].G = 0;
    leds[i].B = 0;
  }
}

// Função para atribuir uma cor RGB a um LED específico
void npSetLED(const uint index, const uint8_t r, const uint8_t g, const uint8_t b) {
  leds[index].R = r;
  leds[index].G = g;
  leds[index].B = b;
}

// Função para limpar o buffer de LEDs
void npClear() {
  for (uint i = 0; i < LED_COUNT; ++i)
    npSetLED(i, 0, 0, 0);
}

// Função para escrever os dados no buffer dos LEDs
void npWrite() {
  for (uint i = 0; i < LED_COUNT; ++i) {
    pio_sm_put_blocking(np_pio, sm, leds[i].G);
    pio_sm_put_blocking(np_pio, sm, leds[i].R);
    pio_sm_put_blocking(np_pio, sm, leds[i].B);
  }
  sleep_us(100); // Espera 100us, sinal de RESET do datasheet.
}

// Definição dos pinos do teclado matricial
const uint8_t ROWS[] = {18, 19, 20, 4};  // Linhas (GPIO 18, 19, 20,4)
const uint8_t COLS[] = {16, 17, 9, 8}; // Colunas (GPIO 16, 17, 9, 8)

// Mapeamento das teclas do teclado 4x4
char keys[4][4] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

// Função para ler a tecla pressionada no teclado matricial
char getKey() {
  for (int row = 0; row < 4; row++) {
    gpio_put(ROWS[row], 0); // Define a linha como LOW
    for (int col = 0; col < 4; col++) {
      if (!gpio_get(COLS[col])) {
        // Espera até que a tecla seja liberada
        while (!gpio_get(COLS[col])) {}
        return keys[row][col]; // Retorna a tecla pressionada
      }
    }
    gpio_put(ROWS[row], 1); // Define a linha como HIGH
  }
  return 0; // Nenhuma tecla pressionada
}
